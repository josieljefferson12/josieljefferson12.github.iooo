# Nome do workflow que aparecer√° na interface do GitHub Actions
name: Deploy Jekyll with GitHub Pages2

# Define os eventos que disparam a execu√ß√£o do workflow
on:
  # Dispara quando h√° push para o reposit√≥rio
  push:
    # Apenas para o branch main
    branches: ["main"]
    # Observa mudan√ßas em qualquer arquivo do reposit√≥rio
    paths:
      - '**/*'
  # Permite acionar manualmente o workflow
  workflow_dispatch:
  # Agenda execu√ß√µes autom√°ticas
  schedule:
    # Executa a cada 2 dias √† meia-noite UTC (formato cron)
    - cron: '0 0 */2 * *'

# Configura as permiss√µes necess√°rias para o workflow
permissions:
  # Permite escrever no reposit√≥rio
  contents: write
  # Permite publicar no GitHub Pages
  pages: write
  # Permite usar tokens JWT para autentica√ß√£o
  id-token: write

# Configura como lidar com execu√ß√µes simult√¢neas
concurrency:
  # Agrupa todas as execu√ß√µes relacionadas ao pages
  group: "pages"
  # false => N√£o cancela execu√ß√µes em andamento
  cancel-in-progress: false  #false ou true# Agora cancela execu√ß√µes anteriores automaticamente

# Define os jobs (tarefas) que comp√µem o workflow
jobs:
  # Primeiro job: configura√ß√£o e gera√ß√£o de metadados
  setup:
    # Executa em m√°quina com Ubuntu
    runs-on: ubuntu-latest
    # Passos deste job
    steps:
      # Faz checkout do c√≥digo do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Baixa todo o hist√≥rico de commits (n√£o apenas o √∫ltimo)
          fetch-depth: 0

      # Configura o ambiente Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Usa a vers√£o 20 do Node.js
          node-version: '20'

      # Instala as depend√™ncias do projeto
      - name: Install dependencies
        run: npm install

      # Gera metadados dos arquivos
      - name: Generate files metadata
        run: npm start
        env:
          # Usa um token pessoal para autentica√ß√£o
          GITHUB_TOKEN: ${{ secrets.MY_PAGES_GITHUB_TOKEN }}

########## üëá ########## üëá ##########
      # Passo 6: Commita altera√ß√µes nos metadados
      - name: Commit metadata changes
        run: |
          cd main-repo
          git config --global user.name "github-actions[bot]"  # Configura usu√°rio
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  # Configura email
          git add files_metadata.json  # Adiciona arquivo de metadados
          if git diff --cached --quiet; then
            echo "No changes to commit"  # Verifica se h√° altera√ß√µes
          else
            git commit -m "Automatic metadata update [skip ci]" || echo "Commit failed - continuing..."  # Commita
            git pull --rebase origin main || echo "Rebase failed - continuing..."  # Atualiza branch
            git push origin main || echo "Push failed - continuing..."  # Envia altera√ß√µes
          fi
        continue-on-error: true  # Continua mesmo em caso de erro
########## üëÜ ########## üëÜ ##########

      # Commita as mudan√ßas nos metadados automaticamente
      - name: Commit metadata changes
        run: |
          # Configura o usu√°rio do Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Adiciona o arquivo de metadados modificado
          git add files_metadata.json
          # Verifica se h√° mudan√ßas antes de commitar
          git diff --cached --quiet || git commit -m "Automatic metadata update [skip ci]"
          # Envia as altera√ß√µes para o reposit√≥rio
          git push

  # Segundo job: constru√ß√£o do site Jekyll
  build:
    # Depende da conclus√£o do job setup
    needs: setup
    # Executa em m√°quina com Ubuntu
    runs-on: ubuntu-latest
    steps:
      # Faz checkout do c√≥digo (incluindo metadados atualizados)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configura o ambiente Ruby
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          # Usa Ruby vers√£o 3.1
          ruby-version: '3.1'
          # Habilita cache para as gems (depend√™ncias)
          bundler-cache: true

      # Prepara o ambiente para GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Compila o site com Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          # Pasta de origem do site
          source: ./
          # Pasta de destino dos arquivos gerados
          destination: ./_site

      # Envia os arquivos compilados como artefato para deploy
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Caminho dos arquivos a serem enviados
          path: './_site'

  # Job de deploy
  deploy:
    environment:
      name: github-pages  # Nome do ambiente
      url: ${{ steps.deployment.outputs.page_url }}  # URL da p√°gina
    runs-on: ubuntu-latest  # Executa no Ubuntu mais recente
    needs: build  # Depende do job build
    steps:
      # Passo 1: Verifica deployments ativos
      - name: Check active deployments
        id: check-deploy
        timeout-minutes: 15  # Tempo m√°ximo
        run: |
          echo "Checking for active deployments..."
          
          # Loop para verificar status
          for i in {1..90}; do
            # Faz requisi√ß√£o para API do GitHub
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pages")
            
            # Extrai status do deployment
            DEPLOY_STATUS=$(echo "$RESPONSE" | jq -r '.status')
            
            # Verifica se pode prosseguir
            if [[ "$DEPLOY_STATUS" == "built" || "$DEPLOY_STATUS" == "null" ]]; then
              echo "No active deployments found. Proceeding..."
              echo "ready=true" >> $GITHUB_OUTPUT
              break
            else
              echo "Active deployment found (status: $DEPLOY_STATUS). Attempt $i/90..."
              if [ $i -eq 90 ]; then
                echo "Timeout reached after 15 minutes."
                exit 0
              fi
              sleep 10  # Aguarda 10 segundos entre tentativas
            fi
          done

      # Passo 2: Faz deploy para GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        timeout-minutes: 30  # Tempo m√°ximo
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Token de autentica√ß√£o
